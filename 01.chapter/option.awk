#! /bin/awk -f
BEGIN {
printf("#include \"../apue.h\" \n")
printf("#include <errno.h>\n")
printf("#include <limits.h> \n")
printf("#include <sys/param.h> \n")
printf("\n")
printf("static void pr_sysconf (char*, int); \n")
printf("static void pr_pathconf (char *, char *, int); \n")
printf("\n")
printf("int \n")
printf("main (int argc, char *argv[])\n")
printf("{\n")
printf("  if (argc != 2)\n")
printf("    err_quit (\"usage: conf <dirname>\"); \n")
printf("\n")
FS=":"
while (getline < "osysconf.sym" > 0) {
printf("#ifdef _POSIX_%s\n", $1)
printf("  printf (\"_POSIX_%s defined to be %%d\\n\", _POSIX_%s); \n", $1, $1)
printf("#else \n")
printf("  printf (\"no symbol for _POSIX_%s\\n\"); \n", $1)
printf("#endif \n")
printf("\n")
printf("#ifdef _XOPEN_%s\n", $1)
printf("  printf (\"_XOPEN_%s defined to be %%d\\n\", _XOPEN_%s); \n", $1, $1)
printf("#else \n")
printf("  printf (\"no symbol for _XOPEN_%s\\n\"); \n", $1)
printf("#endif \n")
printf("\n")
printf("#ifdef _SC_%s\n", $1)
printf("  pr_sysconf (\"sysconf (_SC_%s) = \", _SC_%s); \n", $1, $1)
printf("#else \n")
printf("  printf (\"no symbol for _SC_%s\\n\"); \n", $1)
printf("#endif \n")
printf("\n")
printf("#ifdef _SC_XOPEN_%s\n", $1)
printf("  pr_sysconf (\"sysconf (_SC_XOPEN_%s) = \", _SC_XOPEN_%s); \n", $1, $1)
printf("#else \n")
printf("  printf (\"no symbol for _SC_XOPEN_%s\\n\"); \n", $1)
printf("#endif \n")
printf("printf (\"\\n\"); ")
printf("\n")
}
close ("osysconf.sym")
while (getline < "opathconf.sym" > 0) {
printf("#ifdef _POSIX_%s\n", $1)
printf("  printf (\"_POSIX_%s defined to be %%d\\n\", _POSIX_%s); \n", $1, $1)
printf("#else \n")
printf("  printf (\"no symbol for _POSIX_%s\\n\"); \n", $1)
printf("#endif \n")
printf("\n")
printf("#ifdef _XOPEN_%s\n", $1)
printf("  printf (\"_XOPEN_%s defined to be %%d\\n\", _XOPEN_%s); \n", $1, $1)
printf("#else \n")
printf("  printf (\"no symbol for _XOPEN_%s\\n\"); \n", $1)
printf("#endif \n")
printf("\n")
printf("#ifdef _PC_%s\n", $1)
printf("  pr_pathconf (\"pathconf (_PC_%s) = \", argv[1], _PC_%s); \n", $1, $1)
printf("#else \n")
printf("  printf (\"no symbol for _PC_%s\\n\"); \n", $1)
printf("#endif \n")
printf("\n")
printf("#ifdef _PC_XOPEN_%s\n", $1)
printf("  pr_pathconf (\"pathconf (_PC_XOPEN_%s) = \", argv[1], _PC_XOPEN_%s); \n", $1, $1)
printf("#else \n")
printf("  printf (\"no symbol for _PC_XOPEN_%s\\n\"); \n", $1)
printf("#endif \n")
printf("printf (\"\\n\"); ")
printf("\n")
}
close ("opathconf.sym"); 
exit
}
END {
printf("  exit (0); \n")
printf("}\n")
printf("\n")
printf("static void \n")
printf("pr_sysconf (char *msg, int name) \n")
printf("{\n")
printf("  long val; \n")
printf("  fputs (msg, stdout); \n")
printf("  errno = 0; \n")
printf("  if ((val = sysconf (name)) < 0) { \n")
printf("    if (errno != 0) \n")
printf("      err_sys (\"sysconf error\"); \n")
printf("    else\n")
printf("      fputs (\"(not supported)\\n\", stdout); \n")
printf("  }\n")
printf("  else\n")
printf("    printf (\"%%ld\\n\", val); \n")
printf("}\n")
printf("\n")
printf("\n")
printf("static void \n")
printf("pr_pathconf (char *msg, char *path, int name) \n")
printf("{\n")
printf("  long val; \n")
printf("  fputs (msg, stdout); \n")
printf("  errno = 0; \n")
printf("  if ((val = pathconf (path, name)) < 0) { \n")
printf("    if (errno != 0) \n")
printf("      err_sys (\"pathconf error, path = %%s\", path); \n")
printf("    else\n")
printf("      fputs (\"(not supported)\\n\", stdout); \n")
printf("  }\n")
printf("  else\n")
printf("    printf (\"%%ld\\n\", val); \n")
printf("}\n")
}
